# Docker Compose for Physics-Informed Sentiment Analyzer
# Supports development, staging, and production deployments

version: '3.8'

services:
  # Main API service
  sentiment-analyzer:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      target: ${BUILD_TARGET:-production}
    image: physics-sentiment-analyzer:${TAG:-latest}
    container_name: sentiment-analyzer-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-5000}:5000"
    environment:
      - DIFFHE_ENV=${ENVIRONMENT:-production}
      - DIFFHE_API_PORT=5000
      - DIFFHE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DIFFHE_SECRET_KEY=${SECRET_KEY:-dev-secret-please-change}
      - DIFFHE_DEBUG=${DEBUG:-false}
      - DIFFHE_MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-104857600}
      - DIFFHE_CACHE_TTL=${CACHE_TTL:-3600}
      - DIFFHE_MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-100}
      - DIFFHE_RATE_LIMIT=${RATE_LIMIT:-1000}
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-sentiment_db}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./models:/app/models
    depends_on:
      - redis
      - postgres
    networks:
      - sentiment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-2G}
          cpus: '${CPU_LIMIT:-1.0}'
        reservations:
          memory: ${MEMORY_RESERVATION:-512M}
          cpus: '${CPU_RESERVATION:-0.25}'

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: sentiment-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory ${REDIS_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - sentiment-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: sentiment-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-sentiment_db}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - sentiment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-sentiment_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:1.24-alpine
    container_name: sentiment-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - sentiment-analyzer
    networks:
      - sentiment-network
    profiles:
      - production

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: sentiment-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sentiment-network
    profiles:
      - monitoring

  # Grafana dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: sentiment-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - sentiment-network
    profiles:
      - monitoring

  # Load testing with Locust
  locust:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.locust
    container_name: sentiment-locust
    ports:
      - "${LOCUST_PORT:-8089}:8089"
    environment:
      - TARGET_HOST=http://sentiment-analyzer:5000
    volumes:
      - ./locust:/locust
    networks:
      - sentiment-network
    profiles:
      - testing

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sentiment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16